import { Injectable } from '@nestjs/common'
import { DayOfWeek, Doctor, DoctorSchedule, Prisma, Shift } from '@prisma/client'
import { PrismaService } from '../shared/services/prisma.service'

@Injectable()
export class DoctorRepository {
  constructor(private readonly prismaService: PrismaService) {}

  // Lấy model cho pagination
  getDoctorModel() {
    return this.prismaService.doctor
  }

  // Tạo bác sĩ mới
  async createDoctor(data: {
    userId: number
    specialization?: string
    certifications?: string[]
  }): Promise<Doctor> {
    return this.prismaService.doctor.create({
      data: {
        userId: data.userId,
        specialization: data.specialization || "",
        certifications: data.certifications || [],
      },
      include: {
        user: {
          select: {
            id: true,
            email: true,
            name: true,
            phoneNumber: true,
            avatar: true,
            status: true,
            roleId: true,
            role: true,
            createdAt: true,
            updatedAt: true,
          },
        },
      },
    })
  }

  // Lấy thông tin bác sĩ theo ID
  async findDoctorById(id: number, include?: any): Promise<Doctor | null> {
    return this.prismaService.doctor.findUnique({
      where: { id },
      include,
    })
  }

  // Lấy thông tin bác sĩ theo userId
  async findDoctorByUserId(userId: number): Promise<Doctor | null> {
    return this.prismaService.doctor.findUnique({
      where: { userId },
      include: {
        user: true,
        schedules: true,
      },
    })
  }

  async findAllDoctors(where?: any): Promise<Doctor[]> {
    return this.prismaService.doctor.findMany({
      where: where || { deletedAt: null },
      include: { user: true },
    })
  }

  // Cập nhật thông tin bác sĩ
  async updateDoctor(id: number, data: Prisma.DoctorUpdateInput): Promise<Doctor> {
    return this.prismaService.doctor.update({
      where: { id },
      data,
    })
  }

  // Xóa bác sĩ
  async deleteDoctor(id: number): Promise<Doctor> {
    return this.prismaService.doctor.delete({
      where: { id },
    })
  }

  // Lấy lịch làm việc của bác sĩ
  async getDoctorSchedule(doctorId: number, startDate: Date, endDate: Date): Promise<DoctorSchedule[]> {
    return this.prismaService.doctorSchedule.findMany({
      where: {
        doctorId,
        date: {
          gte: startDate,
          lte: endDate,
        },
      },
      orderBy: {
        date: 'asc',
      },
    })
  }

  // Tạo lịch làm việc cho bác sĩ
  async createDoctorSchedule(data: Prisma.DoctorScheduleCreateInput): Promise<DoctorSchedule> {
    return this.prismaService.doctorSchedule.create({
      data,
    })
  }

  // Cập nhật lịch làm việc
  async updateDoctorSchedule(id: number, data: Prisma.DoctorScheduleUpdateInput): Promise<DoctorSchedule> {
    return this.prismaService.doctorSchedule.update({
      where: { id },
      data,
    })
  }

  // Xóa lịch làm việc
  async deleteDoctorSchedule(id: number): Promise<DoctorSchedule> {
    return this.prismaService.doctorSchedule.delete({
      where: { id },
    })
  }

  // Đếm số ca trong ngày của bác sĩ
  async countShiftsInDay(doctorId: number, date: Date): Promise<number> {
    return this.prismaService.doctorSchedule.count({
      where: {
        doctorId,
        date,
      },
    })
  }

  // Lấy lịch làm việc theo ngày và ca
  async getScheduleByDateAndShift(date: Date, shift: Shift): Promise<DoctorSchedule[]> {
    return this.prismaService.doctorSchedule.findMany({
      where: {
        date,
        shift,
      },
      include: {
        doctor: {
          include: {
            user: true,
          },
        },
      },
    })
  }

  async getSchedulesByDateRange(startDate: Date, endDate: Date): Promise<DoctorSchedule[]> {
    return this.prismaService.doctorSchedule.findMany({
      where: {
        date: {
          gte: startDate,
          lte: endDate,
        },
      },
    })
  }

  async deleteSchedulesByDateRange(startDate: Date, endDate: Date) {
    return this.prismaService.doctorSchedule.deleteMany({
      where: {
        date: {
          gte: startDate,
          lte: endDate,
        },
      },
    })
  }

  async createManySchedules(
    schedules: {
      doctorId: number
      date: Date
      dayOfWeek: DayOfWeek
      shift: Shift
      isAutoGenerated: boolean
    }[],
  ) {
    return this.prismaService.doctorSchedule.createMany({
      data: schedules,
    })
  }

  async findDoctorSchedule(doctorId: number, date: Date, shift: Shift) {
    return this.prismaService.doctorSchedule.findFirst({
      where: {
        doctorId,
        date,
        shift,
      },
    })
  }

  // Schedule related methods
  async findMany(where: Prisma.DoctorWhereInput) {
    return this.prismaService.doctor.findMany({ where })
  }

  async countSchedules(where: Prisma.DoctorScheduleWhereInput) {
    return this.prismaService.doctorSchedule.count({ where })
  }

  async createSchedule(data: Prisma.DoctorScheduleCreateInput) {
    return this.prismaService.doctorSchedule.create({ data })
  }

  async findFirstSchedule(where: Prisma.DoctorScheduleWhereInput) {
    return this.prismaService.doctorSchedule.findFirst({ where })
  }

  async updateSchedule(id: number, data: Prisma.DoctorScheduleUpdateInput) {
    return this.prismaService.doctorSchedule.update({
      where: { id },
      data,
    })
  }

  async findManySchedules(args: Prisma.DoctorScheduleFindManyArgs) {
    return this.prismaService.doctorSchedule.findMany(args)
  }

  async findDoctorByDate(date: Date) {
    return this.prismaService.doctor.findMany({
      where: {
        schedules: {
          some: {
            date,
          },
        },
      },
      include: {
        user: {
          select: {
            email: true,
            name: true,
            phoneNumber: true,
            avatar: true,
          },
        },
        schedules: {
          where: { date },
        },
      },
    })
  }

  async findAllDoctorsWithSchedules(startDate: Date, endDate: Date) {
    return this.prismaService.doctor.findMany({
      include: {
        user: {
          select: {
            id: true,
            email: true,
            name: true,
            phoneNumber: true,
            avatar: true,
            status: true,
            roleId: true,
            role: {
              select: {
                id: true,
                name: true,
                description: true,
                isActive: true,
                createdAt: true,
                updatedAt: true,
              },
            },
          },
        },
        schedules: {
          where: {
            date: {
              gte: startDate,
              lte: endDate,
            },
          },
          orderBy: {
            date: 'asc',
          },
        },
      },
    })
  }

  async findDoctorsWithSchedulesInRange(startDate: Date, endDate: Date) {
    return this.prismaService.doctor.findMany({
      where: {
        schedules: {
          some: {
            date: {
              gte: startDate,
              lte: endDate,
            },
          },
        },
      },
      include: {
        user: {
          select: {
            name: true,
            email: true,
            phoneNumber: true,
            avatar: true,
          },
        },
        schedules: {
          where: {
            date: {
              gte: startDate,
              lte: endDate,
            },
          },
          orderBy: {
            date: 'asc',
          },
        },
      },
    })
  }
}
