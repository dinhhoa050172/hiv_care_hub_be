import { applyDecorators } from '@nestjs/common'
import { ApiOperation, ApiResponse, ApiParam, ApiQuery, ApiBody, ApiTags } from '@nestjs/swagger'
import { Shift } from '@prisma/client'

// Schema cho Doctor
const DoctorResponseSchema = {
  type: 'object',
  properties: {
    id: { type: 'number', example: 1 },
    userId: { type: 'number', example: 1 },
    name: { type: 'string', example: 'Dr. John Doe' },
    email: { type: 'string', example: 'john.doe@example.com' },
    phone: { type: 'string', example: '0123456789' },
    specialization: { type: 'string', example: 'Cardiology' },
    maxShiftsPerDay: { type: 'number', example: 2 },
    isActive: { type: 'boolean', example: true },
    createdAt: { type: 'string', format: 'date-time' },
    updatedAt: { type: 'string', format: 'date-time' },
  },
}

// Schema cho DoctorSchedule
const DoctorScheduleResponseSchema = {
  type: 'object',
  properties: {
    id: { type: 'number', example: 1 },
    doctorId: { type: 'number', example: 1 },
    date: { type: 'string', format: 'date', example: '2024-03-20' },
    dayOfWeek: { type: 'string', enum: ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'] },
    shift: { type: 'string', enum: ['MORNING', 'AFTERNOON'] },
    isAutoGenerated: { type: 'boolean', example: false },
    swappedWithId: { type: 'number', nullable: true, example: null },
    swappedAt: { type: 'string', format: 'date-time', nullable: true, example: null },
    createdAt: { type: 'string', format: 'date-time' },
    updatedAt: { type: 'string', format: 'date-time' },
  },
}

// Schema cho ScheduleConfig
const ScheduleConfigResponseSchema = {
  type: 'object',
  properties: {
    id: { type: 'number', example: 1 },
    doctorsPerShift: { type: 'number', example: 4 },
    startDate: { type: 'string', format: 'date-time', example: '2024-03-01T00:00:00Z' },
    endDate: { type: 'string', format: 'date-time', example: '2024-03-31T23:59:59Z' },
    createdAt: { type: 'string', format: 'date-time' },
    updatedAt: { type: 'string', format: 'date-time' },
  },
}

// Schedule Config Schemas
export const ScheduleConfigSchema = {
  type: 'object',
  properties: {
    id: { type: 'number' },
    doctorsPerShift: { type: 'number' },
    startDate: { type: 'string', format: 'date-time' },
    endDate: { type: 'string', format: 'date-time' },
    createdAt: { type: 'string', format: 'date-time' },
    updatedAt: { type: 'string', format: 'date-time' },
  },
}

export const CreateScheduleConfigSchema = {
  type: 'object',
  properties: {
    doctorsPerShift: { type: 'number', minimum: 1 },
    startDate: { type: 'string', format: 'date-time' },
    endDate: { type: 'string', format: 'date-time' },
  },
  required: ['doctorsPerShift', 'startDate', 'endDate'],
}

// Doctor Schedule Schemas
export const DoctorScheduleSchema = {
  type: 'object',
  properties: {
    id: { type: 'number' },
    doctorId: { type: 'number' },
    date: { type: 'string', format: 'date-time' },
    dayOfWeek: { type: 'string', enum: ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'] },
    shift: { type: 'string', enum: ['MORNING', 'AFTERNOON'] },
    createdAt: { type: 'string', format: 'date-time' },
    updatedAt: { type: 'string', format: 'date-time' },
  },
}

export const RegisterScheduleSchema = {
  type: 'object',
  properties: {
    date: { type: 'string', format: 'date-time' },
    shift: { type: 'string', enum: ['MORNING', 'AFTERNOON'] },
  },
  required: ['date', 'shift'],
}

export const ApiGetAllDoctors = () => {
  return applyDecorators(
    ApiOperation({ summary: 'Get all doctors with pagination and search' }),
    // Pagination parameters
    ApiQuery({
      name: 'page',
      required: false,
      type: Number,
      description: 'Page number (default: 1)',
      example: 1,
      schema: {
        type: 'number',
        minimum: 1,
        default: 1,
      },
    }),
    ApiQuery({
      name: 'limit',
      required: false,
      type: Number,
      description: 'Number of items per page (default: 10)',
      example: 10,
      schema: {
        type: 'number',
        minimum: 1,
        maximum: 100,
        default: 10,
      },
    }),
    ApiQuery({
      name: 'sortBy',
      required: false,
      type: String,
      description: 'Field to sort by',
      example: 'specialization',
      schema: {
        type: 'string',
        enum: ['specialization', 'createdAt', 'updatedAt'],
      },
    }),
    ApiQuery({
      name: 'sortOrder',
      required: false,
      enum: ['asc', 'desc'],
      description: 'Sort order (default: desc)',
      example: 'desc',
      schema: {
        type: 'string',
        enum: ['asc', 'desc'],
        default: 'desc',
      },
    }),
    // Search parameters
    ApiQuery({
      name: 'search',
      required: false,
      type: String,
      description: 'Search term to filter doctors by name or email',
      example: 'john',
      schema: {
        type: 'string',
        minLength: 1,
      },
    }),
    // Filter parameters
    ApiQuery({
      name: 'specialization',
      required: false,
      type: String,
      description: 'Filter by specialization',
      example: 'Cardiology',
    }),

    // Response documentation
    ApiResponse({
      status: 200,
      description: 'Successfully retrieved doctors',
      schema: {
        properties: {
          data: {
            type: 'array',
            items: DoctorResponseSchema,
          },
          meta: {
            type: 'object',
            properties: {
              total: { type: 'number', example: 25 },
              page: { type: 'number', example: 1 },
              limit: { type: 'number', example: 10 },
              totalPages: { type: 'number', example: 3 },
              hasNextPage: { type: 'boolean', example: true },
              hasPreviousPage: { type: 'boolean', example: false },
            },
          },
        },
      },
    }),
    ApiResponse({
      status: 401,
      description: 'Unauthorized',
    }),
    ApiResponse({
      status: 403,
      description: 'Forbidden - Insufficient permissions',
    }),
  )
}

export const ApiGetDoctorById = () => {
  return applyDecorators(
    ApiOperation({ summary: 'Get doctor by ID' }),
    ApiParam({
      name: 'id',
      type: 'number',
      description: 'Doctor ID',
      example: 1,
    }),
    ApiResponse({
      status: 200,
      description: 'Return doctor by ID',
      schema: DoctorResponseSchema,
    }),
    ApiResponse({
      status: 401,
      description: 'Unauthorized',
    }),
    ApiResponse({
      status: 403,
      description: 'Forbidden - Insufficient permissions',
    }),
    ApiResponse({
      status: 404,
      description: 'Doctor not found',
    }),
  )
}

export const ApiCreateDoctor = () => {
  return applyDecorators(
    ApiOperation({ summary: 'Create new doctor with basic information' }),
    ApiBody({
      schema: {
        type: 'object',
        required: ['userId'],
        properties: {
          userId: {
            type: 'number',
            description: 'User ID associated with the doctor',
            example: 1,
          },
          specialization: {
            type: 'string',
            description: 'Medical specialization of the doctor (optional)',
            example: 'Cardiology',
          },
          certifications: {
            type: 'array',
            items: {
              type: 'string',
            },
            description: 'List of doctor certifications (optional)',
            example: ['Medical License', 'Board Certification'],
          },
        },
      },
    }),
    ApiResponse({
      status: 201,
      description: 'Doctor created successfully with basic information',
      schema: DoctorResponseSchema,
    }),
    ApiResponse({
      status: 400,
      description: 'Invalid request body',
    }),
    ApiResponse({
      status: 409,
      description: 'Doctor with this user ID already exists',
    }),
  )
}

export const ApiUpdateDoctor = () => {
  return applyDecorators(
    ApiOperation({ summary: 'Update doctor' }),
    ApiParam({
      name: 'id',
      type: 'number',
      description: 'Doctor ID',
      example: 1,
    }),
    ApiBody({
      schema: {
        type: 'object',
        properties: {
          specialization: {
            type: 'string',
            description: 'Medical specialization of the doctor',
            example: 'Cardiology',
          },
          certifications: {
            type: 'array',
            items: {
              type: 'string',
            },
            description: 'List of doctor certifications',
            example: ['Medical License', 'Board Certification'],
          },
        },
      },
    }),
    ApiResponse({
      status: 200,
      description: 'Doctor updated successfully',
      schema: DoctorResponseSchema,
    }),
    ApiResponse({
      status: 404,
      description: 'Doctor not found',
    }),
  )
}

export const ApiDeleteDoctor = () => {
  return applyDecorators(
    ApiOperation({ summary: 'Delete doctor' }),
    ApiParam({
      name: 'id',
      type: 'number',
      description: 'Doctor ID',
      example: 1,
    }),
    ApiResponse({
      status: 200,
      description: 'Doctor deleted successfully',
      schema: DoctorResponseSchema,
    }),
    ApiResponse({
      status: 401,
      description: 'Unauthorized',
    }),
    ApiResponse({
      status: 403,
      description: 'Forbidden - Insufficient permissions',
    }),
    ApiResponse({
      status: 404,
      description: 'Doctor not found',
    }),
  )
}

export const ApiSwapShifts = () => {
  return applyDecorators(
    ApiOperation({ summary: 'Swap shifts between two doctors on different dates' }),
    ApiBody({
      schema: {
        type: 'object',
        required: ['doctor1', 'doctor2'],
        properties: {
          doctor1: {
            type: 'object',
            required: ['id', 'date', 'shift'],
            properties: {
              id: {
                type: 'number',
                description: 'ID of first doctor',
                example: 1,
              },
              date: {
                type: 'string',
                format: 'date-time',
                description: 'Date of the shift for first doctor',
                example: '2024-06-18T00:00:00.000Z',
              },
              shift: {
                type: 'string',
                enum: ['MORNING', 'AFTERNOON'],
                description: 'Shift for first doctor',
                example: 'MORNING',
              },
            },
          },
          doctor2: {
            type: 'object',
            required: ['id', 'date', 'shift'],
            properties: {
              id: {
                type: 'number',
                description: 'ID of second doctor',
                example: 2,
              },
              date: {
                type: 'string',
                format: 'date-time',
                description: 'Date of the shift for second doctor',
                example: '2024-06-17T00:00:00.000Z',
              },
              shift: {
                type: 'string',
                enum: ['MORNING', 'AFTERNOON'],
                description: 'Shift for second doctor',
                example: 'AFTERNOON',
              },
            },
          },
        },
      },
    }),
    ApiResponse({
      status: 200,
      description: 'Shifts swapped successfully',
      schema: {
        type: 'object',
        properties: {
          message: {
            type: 'string',
            example: 'Shifts swapped successfully',
          },
          doctor1: {
            type: 'object',
            properties: {
              id: {
                type: 'number',
                example: 1,
              },
              newSchedule: {
                type: 'object',
                properties: {
                  date: {
                    type: 'string',
                    format: 'date-time',
                    example: '2024-06-17T00:00:00.000Z',
                  },
                  shift: {
                    type: 'string',
                    enum: ['MORNING', 'AFTERNOON'],
                    example: 'AFTERNOON',
                  },
                },
              },
            },
          },
          doctor2: {
            type: 'object',
            properties: {
              id: {
                type: 'number',
                example: 2,
              },
              newSchedule: {
                type: 'object',
                properties: {
                  date: {
                    type: 'string',
                    format: 'date-time',
                    example: '2024-06-18T00:00:00.000Z',
                  },
                  shift: {
                    type: 'string',
                    enum: ['MORNING', 'AFTERNOON'],
                    example: 'MORNING',
                  },
                },
              },
            },
          },
        },
      },
    }),
    ApiResponse({
      status: 400,
      description:
        'Invalid request - Dates must be in the future, within 5 days of each other, and between Monday and Saturday',
    }),
    ApiResponse({
      status: 401,
      description: 'Unauthorized',
    }),
    ApiResponse({
      status: 403,
      description: 'Forbidden - Insufficient permissions',
    }),
  )
}

export const ApiGetPreferredSchedules = () => {
  return applyDecorators(
    ApiOperation({ summary: "Get doctor's preferred schedules" }),
    ApiBody({
      schema: {
        type: 'object',
        required: ['doctorId'],
        properties: {
          doctorId: {
            type: 'number',
            description: 'Doctor ID',
            example: 1,
          },
        },
      },
    }),
    ApiResponse({
      status: 200,
      description: "Return doctor's preferred schedules",
      schema: {
        type: 'array',
        items: {
          type: 'object',
          properties: {
            dayOfWeek: {
              type: 'string',
              enum: ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'],
            },
            shift: {
              type: 'string',
              enum: ['MORNING', 'AFTERNOON'],
            },
          },
        },
      },
    }),
    ApiResponse({
      status: 401,
      description: 'Unauthorized',
    }),
    ApiResponse({
      status: 403,
      description: 'Forbidden - Insufficient permissions',
    }),
    ApiResponse({
      status: 404,
      description: 'Doctor not found',
    }),
  )
}

export const ApiUpdatePreferredSchedules = () => {
  return applyDecorators(
    ApiOperation({ summary: "Update doctor's preferred schedules" }),
    ApiBody({
      schema: {
        type: 'object',
        required: ['doctorId', 'schedules'],
        properties: {
          doctorId: {
            type: 'number',
            description: 'Doctor ID',
            example: 1,
          },
          schedules: {
            type: 'array',
            items: {
              type: 'object',
              required: ['dayOfWeek', 'shift'],
              properties: {
                dayOfWeek: {
                  type: 'string',
                  enum: ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'],
                },
                shift: {
                  type: 'string',
                  enum: ['MORNING', 'AFTERNOON'],
                },
              },
            },
          },
        },
      },
    }),
    ApiResponse({
      status: 200,
      description: 'Preferred schedules updated successfully',
    }),
    ApiResponse({
      status: 400,
      description: 'Invalid request body',
    }),
    ApiResponse({
      status: 401,
      description: 'Unauthorized',
    }),
    ApiResponse({
      status: 403,
      description: 'Forbidden - Insufficient permissions',
    }),
    ApiResponse({
      status: 404,
      description: 'Doctor not found',
    }),
  )
}

export const ApiGenerateSchedule = () => {
  return applyDecorators(
    ApiOperation({ summary: 'Generate automatic schedule for doctors' }),
    ApiBody({
      schema: {
        type: 'object',
        required: ['startDate', 'doctorsPerShift'],
        properties: {
          startDate: {
            type: 'string',
            format: 'date',
            description: 'Start date of the week (YYYY-MM-DD)',
            example: '2024-03-20T10:00:00Z',
          },
          doctorsPerShift: {
            type: 'number',
            description: 'Number of doctors required per shift',
            example: 4,
            minimum: 1,
          },
        },
      },
    }),
    ApiResponse({
      status: 200,
      description: 'Schedule generated successfully',
      schema: {
        type: 'object',
        properties: {
          message: {
            type: 'string',
            example: 'Schedule generated successfully',
          },
        },
      },
    }),
    ApiResponse({
      status: 400,
      description: 'Invalid request or insufficient doctors',
    }),
    ApiResponse({
      status: 401,
      description: 'Unauthorized',
    }),
    ApiResponse({
      status: 403,
      description: 'Forbidden - Insufficient permissions',
    }),
  )
}

export const ApiGetDoctorSchedule = () => {
  return applyDecorators(
    ApiOperation({ summary: 'Get doctor schedule' }),
    ApiResponse({
      status: 200,
      description: 'Doctor schedule retrieved successfully',
      schema: {
        type: 'array',
        items: DoctorScheduleSchema,
      },
    }),
    ApiResponse({
      status: 404,
      description: 'Doctor not found',
    }),
  )
}

export const ApiAssignDoctorsManually = () => {
  return applyDecorators(
    ApiOperation({ summary: 'Manually assign a doctor to a specific date and shift' }),
    ApiBody({
      schema: {
        type: 'object',
        required: ['doctorId', 'date', 'shift'],
        properties: {
          doctorId: {
            type: 'number',
            description: 'ID of the doctor to assign',
            example: 1,
            minimum: 1,
          },
          date: {
            type: 'string',
            format: 'date-time',
            description: 'Date of the shift (cannot be in the past)',
            example: '2024-03-20T00:00:00.000Z',
          },
          shift: {
            type: 'string',
            enum: Object.values(Shift),
            description: 'Shift to assign (MORNING or AFTERNOON)',
            example: 'MORNING',
          },
        },
      },
    }),
    ApiResponse({
      status: 200,
      description: 'Doctor assigned successfully',
      schema: {
        type: 'object',
        properties: {
          message: {
            type: 'string',
            example: 'Doctor assigned successfully',
          },
          assignment: {
            type: 'object',
            properties: {
              id: { type: 'number', example: 1 },
              doctorId: { type: 'number', example: 1 },
              date: { type: 'string', format: 'date-time', example: '2024-03-20T00:00:00.000Z' },
              shift: { type: 'string', enum: ['MORNING', 'AFTERNOON'], example: 'MORNING' },
              dayOfWeek: { type: 'string', enum: ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'], example: 'WEDNESDAY' },
              doctor: {
                type: 'object',
                properties: {
                  id: { type: 'number', example: 1 },
                  specialization: { type: 'string', example: 'Cardiology' },
                },
              },
            },
          },
        },
      },
    }),
    ApiResponse({
      status: 400,
      description: 'Invalid request - Date in past, doctor not found, or doctor already assigned to this shift',
    }),
    ApiResponse({
      status: 401,
      description: 'Unauthorized',
    }),
    ApiResponse({
      status: 403,
      description: 'Forbidden - Insufficient permissions',
    }),
  )
}

export const ApiGetDoctorsByDate = () => {
  return applyDecorators(
    ApiOperation({ summary: 'Get all doctors working on a specific date' }),
    ApiQuery({
      name: 'date',
      required: true,
      type: String,
      description: 'Date to filter doctors (format: YYYY-MM-DD or ISO string)',
      example: '2024-06-18',
    }),
    ApiResponse({
      status: 200,
      description: 'List of doctors working on the given date',
      schema: {
        type: 'array',
        items: DoctorResponseSchema,
      },
    }),
    ApiResponse({
      status: 400,
      description: 'Invalid date format',
    }),
    ApiResponse({
      status: 401,
      description: 'Unauthorized',
    }),
    ApiResponse({
      status: 403,
      description: 'Forbidden - Insufficient permissions',
    }),
  )
}
